#!/bin/bash
#
# Copyright (c) 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>.  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Add -DHAVE_BMI to CFLAGS for bmi support
# Must compile as -O0 or ALG_ASM breaks
# Must compile as -O0 for ALG_PLAIN && USE_ASM

TARGET=${1}

USE_DEBUG=1
if [[ -n "${USE_DEBUG}" && "${USE_DEBUG}" == "1" ]] ; then
	DEBUG_FLAGS=( -DDEBUG -DDEBUG_LEVEL_2 )
	DEBUG_CFLAGS+=( -fsanitize=address,undefined -fno-omit-frame-pointer -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION )
	# todo random inputs for fuzzing
fi

#PATH="/usr/lib/llvm/11/bin:${PATH}"
#CC=clang

CC=gcc

build_sha256r()
{
	echo "Building sha256 (reference)"


	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha256r.c -o main-tsha256r.o
	${CC} ${CFLAGS[@]} -no-pie -o tsha256r main-tsha256r.o
}

build_sha256a()
{
	echo "Building sha256 (assembly)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c tsha256a.S -o tsha256a.o
	${CC} ${CFLAGS[@]} -c main-tsha256a.c -o main-tsha256a.o
	${CC} ${CFLAGS[@]} -no-pie -o tsha256a main-tsha256a.o tsha256a.o
}

build_sha256ha()
{
	echo "Building sha256 (hybrid-asm)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha256ha.c -o main-tsha256ha.o
	${CC} ${CFLAGS[@]} -no-pie -o tsha256ha main-tsha256ha.o
}

build_sha256hp()
{
	echo "Building sha256 (hybrid-plain)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha256hp.c -o main-tsha256hp.o
	${CC} ${CFLAGS[@]} -no-pie -o tsha256hp main-tsha256hp.o
}

build_sha512_256r()
{
	echo "Building sha512/256 (reference)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha512t256r.c -o main-tsha512t256r.o
	${CC} ${CFLAGS[@]} -no-pie -o main-tsha512t256r main-tsha512t256r.o
}

build_sha512_256a()
{
	echo "Building sha512/256 (assembly)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c tsha512t256.S -o tsha512t256.o
	${CC} ${CFLAGS[@]} -c main-tsha512t256a.c -o main-tsha512t256a.o
	${CC} ${CFLAGS[@]} -no-pie -o main-tsha512t256a main-tsha512t256a.o tsha512t256.o
}

build_sha512_256ha()
{
	echo "Building sha512/256 (hybrid-asm)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha512t256ha.c -o main-tsha512t256ha.o
	${CC} ${CFLAGS[@]} -no-pie -o main-tsha512t256ha main-tsha512t256ha.o
}

build_sha512_256hp()
{
	echo "Building sha512/256 (hybrid-plain)"
	CFLAGS=( -march=native -O0 -m64 -DHAVE_SSE2 ${DEBUG_FLAGS[@]} -mfxsr)
	[[ ${CC} == "gcc" ]] && CFLAGS+=( -ffixed-reg )

	${CC} ${CFLAGS[@]} -c main-tsha512t256hp.c -o main-tsha512t256hp.o
	${CC} ${CFLAGS[@]} -no-pie -o main-tsha512t256hp main-tsha512t256hp.o
}

main()
{
	if [[ "${TARGET}" == "sha256a" ]] ; then
		build_sha256a
	elif [[ "${TARGET}" == "sha256ha" ]] ; then
		build_sha256ha
	elif [[ "${TARGET}" == "sha256hp" ]] ; then
		build_sha256hp
	elif [[ "${TARGET}" == "sha256r" ]] ; then
		build_sha256r
	elif [[ "${TARGET}" == "sha512/256a" ]] ; then
		build_sha512_256a
	elif [[ "${TARGET}" == "sha512/256ha" ]] ; then
		build_sha512_256ha
	elif [[ "${TARGET}" == "sha512/256hp" ]] ; then
		build_sha512_256hp
	elif [[ "${TARGET}" == "sha512/256r" ]] ; then
		build_sha512_256r
	fi
}

main
