/*
 * tsha256 - A register based Secure Hashing Algorithm 2 implementation
 *
 * Copyright (c) 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */
#ifndef TSHA256_SSE2
#define TSHA256_SSE2

/* ci must be 0 4 8 12 */
#      define GET_W(W,CI,XMM,TXMM)						\
	asm (	"movdqa          %2,%1\n\t"					\
		"psrldq          %3,%1\n\t"					\
		"movd            %1,%k0"					\
		: "=r" (W),							\
		  "+x" (TXMM)							\
		: "x" (XMM),							\
		  "i" (CI));

#      define GET_W_ALT_C0(W,MM)						\
	asm ( 	"movd		%1,%k0"						\
		: "=r" (W)							\
		: "y" (MM));

#      define INSERT_BYTE(CI,C,XMM,TXMM)					\
	asm (	"movd		%k2,%1\n\t"					\
		"pslldq		%3,%1\n\t"					\
		"pxor		%1,%0"						\
		: "=x" (XMM),							\
		  "+x" (TXMM)							\
		: "r" (C),							\
		  "i" (CI));

#      define INSERT_BYTE_ALT(CI,C,MM,GPR0,GPR1)				\
	asm (	"movl		%k3,%k1\n\t"					\
		"shlq		%4,%q1\n\t"					\
		"movq		%0,%q2\n\t"					\
		"xorq		%q1,%q2\n\t"					\
		"movq		%q2,%0"						\
		: "+x" (MM),							\
		  "+r" (GPR0),							\
		  "+r" (GPR1)							\
		: "r" (C),							\
		  "i" (CI));

#      define GET_W_ALT_C1(W,MM,GPR)						\
	asm (	"movq		%2,%q1\n\t"					\
	      	"shrq		$32,%q1\n\t"					\
	      	"movl		%k1,%k0"					\
		: "=r" (W),							\
		  "+r" (GPR)							\
		: "y" (MM));


/* CI must be 0,4,8,12 */
#      define SET_W(W,CI,XMM,TXMM,GPR)						\
	asm (	"movl            $0xffffffff,%k2\n\t"				\
		"movd            %k2,%1\n\t"					\
		"pslldq          %4,%1\n\t"					\
		"pandn           %0,%1\n\t"					\
		"movdqa          %1,%0\n\t"					\
		"movd            %k3,%1\n\t"					\
		"pslldq          %4,%1\n\t"					\
		"pxor            %1,%0"						\
		: "+x" (XMM),							\
		  "+x" (TXMM),							\
		  "+r" (GPR)							\
		: "r" (W),							\
		  "i" (CI));

/* CI is only 0 or 32 */
#      define SET_W_ALT(W,CI,MM,GPR0,GPR1)					\
	asm (	"movl            $0xffffffff,%k0\n\t"				\
		"movq            %2,%q1\n\t"					\
		"shlq            %4,%q0\n\t"					\
		PANDN0								\
		"movl            %k3,%k0\n\t"					\
		"shlq            %4,%q0\n\t"					\
		"xorq            %q0,%q1\n\t"					\
		"movq            %q1,%2"					\
		: "+r" (GPR0),							\
		  "+r" (GPR1),							\
		  "+y" (MM)							\
		: "r"  (W),							\
		  "i"  (CI));

u32 /*:rax*/
get_w(u32 wi	/*:rdi - wi position*/)
{
//	debug_printf("\nwi=%d\n",wi);

	register u32 w asm ("rax");
	register u32 gpr asm ("r13");
	switch (wi)
	{
		/* Unrolled to get rid of div which is ~38 clocks */
		/* This gets converted into a jump table by GCC with -O0 still */
		/* Generated by a BASH script.  Set gen_conditional.sh for details. */
		case 0: GET_W(w,0,xmm0,xmm15); break;
		case 1: GET_W(w,4,xmm0,xmm15); break;
		case 2: GET_W(w,8,xmm0,xmm15); break;
		case 3: GET_W(w,12,xmm0,xmm15); break;
		case 4: GET_W(w,0,xmm1,xmm15); break;
		case 5: GET_W(w,4,xmm1,xmm15); break;
		case 6: GET_W(w,8,xmm1,xmm15); break;
		case 7: GET_W(w,12,xmm1,xmm15); break;
		case 8: GET_W(w,0,xmm2,xmm15); break;
		case 9: GET_W(w,4,xmm2,xmm15); break;
		case 10: GET_W(w,8,xmm2,xmm15); break;
		case 11: GET_W(w,12,xmm2,xmm15); break;
		case 12: GET_W(w,0,xmm3,xmm15); break;
		case 13: GET_W(w,4,xmm3,xmm15); break;
		case 14: GET_W(w,8,xmm3,xmm15); break;
		case 15: GET_W(w,12,xmm3,xmm15); break;
		case 16: GET_W(w,0,xmm4,xmm15); break;
		case 17: GET_W(w,4,xmm4,xmm15); break;
		case 18: GET_W(w,8,xmm4,xmm15); break;
		case 19: GET_W(w,12,xmm4,xmm15); break;
		case 20: GET_W(w,0,xmm5,xmm15); break;
		case 21: GET_W(w,4,xmm5,xmm15); break;
		case 22: GET_W(w,8,xmm5,xmm15); break;
		case 23: GET_W(w,12,xmm5,xmm15); break;
		case 24: GET_W(w,0,xmm6,xmm15); break;
		case 25: GET_W(w,4,xmm6,xmm15); break;
		case 26: GET_W(w,8,xmm6,xmm15); break;
		case 27: GET_W(w,12,xmm6,xmm15); break;
		case 28: GET_W(w,0,xmm7,xmm15); break;
		case 29: GET_W(w,4,xmm7,xmm15); break;
		case 30: GET_W(w,8,xmm7,xmm15); break;
		case 31: GET_W(w,12,xmm7,xmm15); break;
		case 32: GET_W(w,0,xmm8,xmm15); break;
		case 33: GET_W(w,4,xmm8,xmm15); break;
		case 34: GET_W(w,8,xmm8,xmm15); break;
		case 35: GET_W(w,12,xmm8,xmm15); break;
		case 36: GET_W(w,0,xmm9,xmm15); break;
		case 37: GET_W(w,4,xmm9,xmm15); break;
		case 38: GET_W(w,8,xmm9,xmm15); break;
		case 39: GET_W(w,12,xmm9,xmm15); break;
		case 40: GET_W(w,0,xmm10,xmm15); break;
		case 41: GET_W(w,4,xmm10,xmm15); break;
		case 42: GET_W(w,8,xmm10,xmm15); break;
		case 43: GET_W(w,12,xmm10,xmm15); break;
		case 44: GET_W(w,0,xmm11,xmm15); break;
		case 45: GET_W(w,4,xmm11,xmm15); break;
		case 46: GET_W(w,8,xmm11,xmm15); break;
		case 47: GET_W(w,12,xmm11,xmm15); break;
		case 48: GET_W(w,0,xmm12,xmm15); break;
		case 49: GET_W(w,4,xmm12,xmm15); break;
		case 50: GET_W(w,8,xmm12,xmm15); break;
		case 51: GET_W(w,12,xmm12,xmm15); break;
		case 52: GET_W(w,0,xmm13,xmm15); break;
		case 53: GET_W(w,4,xmm13,xmm15); break;
		case 54: GET_W(w,8,xmm13,xmm15); break;
		case 55: GET_W(w,12,xmm13,xmm15); break;
		case 56: GET_W(w,0,xmm14,xmm15); break;
		case 57: GET_W(w,4,xmm14,xmm15); break;
		case 58: GET_W(w,8,xmm14,xmm15); break;
		case 59: GET_W(w,12,xmm14,xmm15); break;
		case 60: GET_W_ALT_C0(w,mm4); break;
		case 61: GET_W_ALT_C1(w,mm4,gpr); break;
		case 62: GET_W_ALT_C0(w,mm5); break;
		case 63: GET_W_ALT_C1(w,mm5,gpr); break;
	}
	return w;
}

void _insert_W_byte(u32 bi, u32 c)
{
	register u32 gpr0 asm ("r10");
	register u32 gpr1 asm ("r11");
	switch(bi)
	{
		/* Unrolled to get rid of div which is ~38 clocks */
		/* This gets converted into a jump table by GCC with -O0 still */
		/* Generated by a BASH script.  Set gen_conditional.sh for details. */
		case 0: INSERT_BYTE(0,c,xmm0,xmm15); break;
		case 1: INSERT_BYTE(1,c,xmm0,xmm15); break;
		case 2: INSERT_BYTE(2,c,xmm0,xmm15); break;
		case 3: INSERT_BYTE(3,c,xmm0,xmm15); break;
		case 4: INSERT_BYTE(4,c,xmm0,xmm15); break;
		case 5: INSERT_BYTE(5,c,xmm0,xmm15); break;
		case 6: INSERT_BYTE(6,c,xmm0,xmm15); break;
		case 7: INSERT_BYTE(7,c,xmm0,xmm15); break;
		case 8: INSERT_BYTE(8,c,xmm0,xmm15); break;
		case 9: INSERT_BYTE(9,c,xmm0,xmm15); break;
		case 10: INSERT_BYTE(10,c,xmm0,xmm15); break;
		case 11: INSERT_BYTE(11,c,xmm0,xmm15); break;
		case 12: INSERT_BYTE(12,c,xmm0,xmm15); break;
		case 13: INSERT_BYTE(13,c,xmm0,xmm15); break;
		case 14: INSERT_BYTE(14,c,xmm0,xmm15); break;
		case 15: INSERT_BYTE(15,c,xmm0,xmm15); break;
		case 16: INSERT_BYTE(0,c,xmm1,xmm15); break;
		case 17: INSERT_BYTE(1,c,xmm1,xmm15); break;
		case 18: INSERT_BYTE(2,c,xmm1,xmm15); break;
		case 19: INSERT_BYTE(3,c,xmm1,xmm15); break;
		case 20: INSERT_BYTE(4,c,xmm1,xmm15); break;
		case 21: INSERT_BYTE(5,c,xmm1,xmm15); break;
		case 22: INSERT_BYTE(6,c,xmm1,xmm15); break;
		case 23: INSERT_BYTE(7,c,xmm1,xmm15); break;
		case 24: INSERT_BYTE(8,c,xmm1,xmm15); break;
		case 25: INSERT_BYTE(9,c,xmm1,xmm15); break;
		case 26: INSERT_BYTE(10,c,xmm1,xmm15); break;
		case 27: INSERT_BYTE(11,c,xmm1,xmm15); break;
		case 28: INSERT_BYTE(12,c,xmm1,xmm15); break;
		case 29: INSERT_BYTE(13,c,xmm1,xmm15); break;
		case 30: INSERT_BYTE(14,c,xmm1,xmm15); break;
		case 31: INSERT_BYTE(15,c,xmm1,xmm15); break;
		case 32: INSERT_BYTE(0,c,xmm2,xmm15); break;
		case 33: INSERT_BYTE(1,c,xmm2,xmm15); break;
		case 34: INSERT_BYTE(2,c,xmm2,xmm15); break;
		case 35: INSERT_BYTE(3,c,xmm2,xmm15); break;
		case 36: INSERT_BYTE(4,c,xmm2,xmm15); break;
		case 37: INSERT_BYTE(5,c,xmm2,xmm15); break;
		case 38: INSERT_BYTE(6,c,xmm2,xmm15); break;
		case 39: INSERT_BYTE(7,c,xmm2,xmm15); break;
		case 40: INSERT_BYTE(8,c,xmm2,xmm15); break;
		case 41: INSERT_BYTE(9,c,xmm2,xmm15); break;
		case 42: INSERT_BYTE(10,c,xmm2,xmm15); break;
		case 43: INSERT_BYTE(11,c,xmm2,xmm15); break;
		case 44: INSERT_BYTE(12,c,xmm2,xmm15); break;
		case 45: INSERT_BYTE(13,c,xmm2,xmm15); break;
		case 46: INSERT_BYTE(14,c,xmm2,xmm15); break;
		case 47: INSERT_BYTE(15,c,xmm2,xmm15); break;
		case 48: INSERT_BYTE(0,c,xmm3,xmm15); break;
		case 49: INSERT_BYTE(1,c,xmm3,xmm15); break;
		case 50: INSERT_BYTE(2,c,xmm3,xmm15); break;
		case 51: INSERT_BYTE(3,c,xmm3,xmm15); break;
		case 52: INSERT_BYTE(4,c,xmm3,xmm15); break;
		case 53: INSERT_BYTE(5,c,xmm3,xmm15); break;
		case 54: INSERT_BYTE(6,c,xmm3,xmm15); break;
		case 55: INSERT_BYTE(7,c,xmm3,xmm15); break;
		case 56: INSERT_BYTE(8,c,xmm3,xmm15); break;
		case 57: INSERT_BYTE(9,c,xmm3,xmm15); break;
		case 58: INSERT_BYTE(10,c,xmm3,xmm15); break;
		case 59: INSERT_BYTE(11,c,xmm3,xmm15); break;
		case 60: INSERT_BYTE(12,c,xmm3,xmm15); break;
		case 61: INSERT_BYTE(13,c,xmm3,xmm15); break;
		case 62: INSERT_BYTE(14,c,xmm3,xmm15); break;
		case 63: INSERT_BYTE(15,c,xmm3,xmm15); break;
		case 64: INSERT_BYTE(0,c,xmm4,xmm15); break;
		case 65: INSERT_BYTE(1,c,xmm4,xmm15); break;
		case 66: INSERT_BYTE(2,c,xmm4,xmm15); break;
		case 67: INSERT_BYTE(3,c,xmm4,xmm15); break;
		case 68: INSERT_BYTE(4,c,xmm4,xmm15); break;
		case 69: INSERT_BYTE(5,c,xmm4,xmm15); break;
		case 70: INSERT_BYTE(6,c,xmm4,xmm15); break;
		case 71: INSERT_BYTE(7,c,xmm4,xmm15); break;
		case 72: INSERT_BYTE(8,c,xmm4,xmm15); break;
		case 73: INSERT_BYTE(9,c,xmm4,xmm15); break;
		case 74: INSERT_BYTE(10,c,xmm4,xmm15); break;
		case 75: INSERT_BYTE(11,c,xmm4,xmm15); break;
		case 76: INSERT_BYTE(12,c,xmm4,xmm15); break;
		case 77: INSERT_BYTE(13,c,xmm4,xmm15); break;
		case 78: INSERT_BYTE(14,c,xmm4,xmm15); break;
		case 79: INSERT_BYTE(15,c,xmm4,xmm15); break;
		case 80: INSERT_BYTE(0,c,xmm5,xmm15); break;
		case 81: INSERT_BYTE(1,c,xmm5,xmm15); break;
		case 82: INSERT_BYTE(2,c,xmm5,xmm15); break;
		case 83: INSERT_BYTE(3,c,xmm5,xmm15); break;
		case 84: INSERT_BYTE(4,c,xmm5,xmm15); break;
		case 85: INSERT_BYTE(5,c,xmm5,xmm15); break;
		case 86: INSERT_BYTE(6,c,xmm5,xmm15); break;
		case 87: INSERT_BYTE(7,c,xmm5,xmm15); break;
		case 88: INSERT_BYTE(8,c,xmm5,xmm15); break;
		case 89: INSERT_BYTE(9,c,xmm5,xmm15); break;
		case 90: INSERT_BYTE(10,c,xmm5,xmm15); break;
		case 91: INSERT_BYTE(11,c,xmm5,xmm15); break;
		case 92: INSERT_BYTE(12,c,xmm5,xmm15); break;
		case 93: INSERT_BYTE(13,c,xmm5,xmm15); break;
		case 94: INSERT_BYTE(14,c,xmm5,xmm15); break;
		case 95: INSERT_BYTE(15,c,xmm5,xmm15); break;
		case 96: INSERT_BYTE(0,c,xmm6,xmm15); break;
		case 97: INSERT_BYTE(1,c,xmm6,xmm15); break;
		case 98: INSERT_BYTE(2,c,xmm6,xmm15); break;
		case 99: INSERT_BYTE(3,c,xmm6,xmm15); break;
		case 100: INSERT_BYTE(4,c,xmm6,xmm15); break;
		case 101: INSERT_BYTE(5,c,xmm6,xmm15); break;
		case 102: INSERT_BYTE(6,c,xmm6,xmm15); break;
		case 103: INSERT_BYTE(7,c,xmm6,xmm15); break;
		case 104: INSERT_BYTE(8,c,xmm6,xmm15); break;
		case 105: INSERT_BYTE(9,c,xmm6,xmm15); break;
		case 106: INSERT_BYTE(10,c,xmm6,xmm15); break;
		case 107: INSERT_BYTE(11,c,xmm6,xmm15); break;
		case 108: INSERT_BYTE(12,c,xmm6,xmm15); break;
		case 109: INSERT_BYTE(13,c,xmm6,xmm15); break;
		case 110: INSERT_BYTE(14,c,xmm6,xmm15); break;
		case 111: INSERT_BYTE(15,c,xmm6,xmm15); break;
		case 112: INSERT_BYTE(0,c,xmm7,xmm15); break;
		case 113: INSERT_BYTE(1,c,xmm7,xmm15); break;
		case 114: INSERT_BYTE(2,c,xmm7,xmm15); break;
		case 115: INSERT_BYTE(3,c,xmm7,xmm15); break;
		case 116: INSERT_BYTE(4,c,xmm7,xmm15); break;
		case 117: INSERT_BYTE(5,c,xmm7,xmm15); break;
		case 118: INSERT_BYTE(6,c,xmm7,xmm15); break;
		case 119: INSERT_BYTE(7,c,xmm7,xmm15); break;
		case 120: INSERT_BYTE(8,c,xmm7,xmm15); break;
		case 121: INSERT_BYTE(9,c,xmm7,xmm15); break;
		case 122: INSERT_BYTE(10,c,xmm7,xmm15); break;
		case 123: INSERT_BYTE(11,c,xmm7,xmm15); break;
		case 124: INSERT_BYTE(12,c,xmm7,xmm15); break;
		case 125: INSERT_BYTE(13,c,xmm7,xmm15); break;
		case 126: INSERT_BYTE(14,c,xmm7,xmm15); break;
		case 127: INSERT_BYTE(15,c,xmm7,xmm15); break;
		case 128: INSERT_BYTE(0,c,xmm8,xmm15); break;
		case 129: INSERT_BYTE(1,c,xmm8,xmm15); break;
		case 130: INSERT_BYTE(2,c,xmm8,xmm15); break;
		case 131: INSERT_BYTE(3,c,xmm8,xmm15); break;
		case 132: INSERT_BYTE(4,c,xmm8,xmm15); break;
		case 133: INSERT_BYTE(5,c,xmm8,xmm15); break;
		case 134: INSERT_BYTE(6,c,xmm8,xmm15); break;
		case 135: INSERT_BYTE(7,c,xmm8,xmm15); break;
		case 136: INSERT_BYTE(8,c,xmm8,xmm15); break;
		case 137: INSERT_BYTE(9,c,xmm8,xmm15); break;
		case 138: INSERT_BYTE(10,c,xmm8,xmm15); break;
		case 139: INSERT_BYTE(11,c,xmm8,xmm15); break;
		case 140: INSERT_BYTE(12,c,xmm8,xmm15); break;
		case 141: INSERT_BYTE(13,c,xmm8,xmm15); break;
		case 142: INSERT_BYTE(14,c,xmm8,xmm15); break;
		case 143: INSERT_BYTE(15,c,xmm8,xmm15); break;
		case 144: INSERT_BYTE(0,c,xmm9,xmm15); break;
		case 145: INSERT_BYTE(1,c,xmm9,xmm15); break;
		case 146: INSERT_BYTE(2,c,xmm9,xmm15); break;
		case 147: INSERT_BYTE(3,c,xmm9,xmm15); break;
		case 148: INSERT_BYTE(4,c,xmm9,xmm15); break;
		case 149: INSERT_BYTE(5,c,xmm9,xmm15); break;
		case 150: INSERT_BYTE(6,c,xmm9,xmm15); break;
		case 151: INSERT_BYTE(7,c,xmm9,xmm15); break;
		case 152: INSERT_BYTE(8,c,xmm9,xmm15); break;
		case 153: INSERT_BYTE(9,c,xmm9,xmm15); break;
		case 154: INSERT_BYTE(10,c,xmm9,xmm15); break;
		case 155: INSERT_BYTE(11,c,xmm9,xmm15); break;
		case 156: INSERT_BYTE(12,c,xmm9,xmm15); break;
		case 157: INSERT_BYTE(13,c,xmm9,xmm15); break;
		case 158: INSERT_BYTE(14,c,xmm9,xmm15); break;
		case 159: INSERT_BYTE(15,c,xmm9,xmm15); break;
		case 160: INSERT_BYTE(0,c,xmm10,xmm15); break;
		case 161: INSERT_BYTE(1,c,xmm10,xmm15); break;
		case 162: INSERT_BYTE(2,c,xmm10,xmm15); break;
		case 163: INSERT_BYTE(3,c,xmm10,xmm15); break;
		case 164: INSERT_BYTE(4,c,xmm10,xmm15); break;
		case 165: INSERT_BYTE(5,c,xmm10,xmm15); break;
		case 166: INSERT_BYTE(6,c,xmm10,xmm15); break;
		case 167: INSERT_BYTE(7,c,xmm10,xmm15); break;
		case 168: INSERT_BYTE(8,c,xmm10,xmm15); break;
		case 169: INSERT_BYTE(9,c,xmm10,xmm15); break;
		case 170: INSERT_BYTE(10,c,xmm10,xmm15); break;
		case 171: INSERT_BYTE(11,c,xmm10,xmm15); break;
		case 172: INSERT_BYTE(12,c,xmm10,xmm15); break;
		case 173: INSERT_BYTE(13,c,xmm10,xmm15); break;
		case 174: INSERT_BYTE(14,c,xmm10,xmm15); break;
		case 175: INSERT_BYTE(15,c,xmm10,xmm15); break;
		case 176: INSERT_BYTE(0,c,xmm11,xmm15); break;
		case 177: INSERT_BYTE(1,c,xmm11,xmm15); break;
		case 178: INSERT_BYTE(2,c,xmm11,xmm15); break;
		case 179: INSERT_BYTE(3,c,xmm11,xmm15); break;
		case 180: INSERT_BYTE(4,c,xmm11,xmm15); break;
		case 181: INSERT_BYTE(5,c,xmm11,xmm15); break;
		case 182: INSERT_BYTE(6,c,xmm11,xmm15); break;
		case 183: INSERT_BYTE(7,c,xmm11,xmm15); break;
		case 184: INSERT_BYTE(8,c,xmm11,xmm15); break;
		case 185: INSERT_BYTE(9,c,xmm11,xmm15); break;
		case 186: INSERT_BYTE(10,c,xmm11,xmm15); break;
		case 187: INSERT_BYTE(11,c,xmm11,xmm15); break;
		case 188: INSERT_BYTE(12,c,xmm11,xmm15); break;
		case 189: INSERT_BYTE(13,c,xmm11,xmm15); break;
		case 190: INSERT_BYTE(14,c,xmm11,xmm15); break;
		case 191: INSERT_BYTE(15,c,xmm11,xmm15); break;
		case 192: INSERT_BYTE(0,c,xmm12,xmm15); break;
		case 193: INSERT_BYTE(1,c,xmm12,xmm15); break;
		case 194: INSERT_BYTE(2,c,xmm12,xmm15); break;
		case 195: INSERT_BYTE(3,c,xmm12,xmm15); break;
		case 196: INSERT_BYTE(4,c,xmm12,xmm15); break;
		case 197: INSERT_BYTE(5,c,xmm12,xmm15); break;
		case 198: INSERT_BYTE(6,c,xmm12,xmm15); break;
		case 199: INSERT_BYTE(7,c,xmm12,xmm15); break;
		case 200: INSERT_BYTE(8,c,xmm12,xmm15); break;
		case 201: INSERT_BYTE(9,c,xmm12,xmm15); break;
		case 202: INSERT_BYTE(10,c,xmm12,xmm15); break;
		case 203: INSERT_BYTE(11,c,xmm12,xmm15); break;
		case 204: INSERT_BYTE(12,c,xmm12,xmm15); break;
		case 205: INSERT_BYTE(13,c,xmm12,xmm15); break;
		case 206: INSERT_BYTE(14,c,xmm12,xmm15); break;
		case 207: INSERT_BYTE(15,c,xmm12,xmm15); break;
		case 208: INSERT_BYTE(0,c,xmm13,xmm15); break;
		case 209: INSERT_BYTE(1,c,xmm13,xmm15); break;
		case 210: INSERT_BYTE(2,c,xmm13,xmm15); break;
		case 211: INSERT_BYTE(3,c,xmm13,xmm15); break;
		case 212: INSERT_BYTE(4,c,xmm13,xmm15); break;
		case 213: INSERT_BYTE(5,c,xmm13,xmm15); break;
		case 214: INSERT_BYTE(6,c,xmm13,xmm15); break;
		case 215: INSERT_BYTE(7,c,xmm13,xmm15); break;
		case 216: INSERT_BYTE(8,c,xmm13,xmm15); break;
		case 217: INSERT_BYTE(9,c,xmm13,xmm15); break;
		case 218: INSERT_BYTE(10,c,xmm13,xmm15); break;
		case 219: INSERT_BYTE(11,c,xmm13,xmm15); break;
		case 220: INSERT_BYTE(12,c,xmm13,xmm15); break;
		case 221: INSERT_BYTE(13,c,xmm13,xmm15); break;
		case 222: INSERT_BYTE(14,c,xmm13,xmm15); break;
		case 223: INSERT_BYTE(15,c,xmm13,xmm15); break;
		case 224: INSERT_BYTE(0,c,xmm14,xmm15); break;
		case 225: INSERT_BYTE(1,c,xmm14,xmm15); break;
		case 226: INSERT_BYTE(2,c,xmm14,xmm15); break;
		case 227: INSERT_BYTE(3,c,xmm14,xmm15); break;
		case 228: INSERT_BYTE(4,c,xmm14,xmm15); break;
		case 229: INSERT_BYTE(5,c,xmm14,xmm15); break;
		case 230: INSERT_BYTE(6,c,xmm14,xmm15); break;
		case 231: INSERT_BYTE(7,c,xmm14,xmm15); break;
		case 232: INSERT_BYTE(8,c,xmm14,xmm15); break;
		case 233: INSERT_BYTE(9,c,xmm14,xmm15); break;
		case 234: INSERT_BYTE(10,c,xmm14,xmm15); break;
		case 235: INSERT_BYTE(11,c,xmm14,xmm15); break;
		case 236: INSERT_BYTE(12,c,xmm14,xmm15); break;
		case 237: INSERT_BYTE(13,c,xmm14,xmm15); break;
		case 238: INSERT_BYTE(14,c,xmm14,xmm15); break;
		case 239: INSERT_BYTE(15,c,xmm14,xmm15); break;
		case 240: INSERT_BYTE_ALT(0,c,mm4,gpr0,gpr1); break;
		case 241: INSERT_BYTE_ALT(1,c,mm4,gpr0,gpr1); break;
		case 242: INSERT_BYTE_ALT(2,c,mm4,gpr0,gpr1); break;
		case 243: INSERT_BYTE_ALT(3,c,mm4,gpr0,gpr1); break;
		case 244: INSERT_BYTE_ALT(4,c,mm4,gpr0,gpr1); break;
		case 245: INSERT_BYTE_ALT(5,c,mm4,gpr0,gpr1); break;
		case 246: INSERT_BYTE_ALT(6,c,mm4,gpr0,gpr1); break;
		case 247: INSERT_BYTE_ALT(7,c,mm4,gpr0,gpr1); break;
		case 248: INSERT_BYTE_ALT(0,c,mm5,gpr0,gpr1); break;
		case 249: INSERT_BYTE_ALT(1,c,mm5,gpr0,gpr1); break;
		case 250: INSERT_BYTE_ALT(2,c,mm5,gpr0,gpr1); break;
		case 251: INSERT_BYTE_ALT(3,c,mm5,gpr0,gpr1); break;
		case 252: INSERT_BYTE_ALT(4,c,mm5,gpr0,gpr1); break;
		case 253: INSERT_BYTE_ALT(5,c,mm5,gpr0,gpr1); break;
		case 254: INSERT_BYTE_ALT(6,c,mm5,gpr0,gpr1); break;
		case 255: INSERT_BYTE_ALT(7,c,mm5,gpr0,gpr1); break;
	}
}

void /*:rax*/
set_w(u32 w		/*:rdi*/,
      u32 wi		/*:rsi - wi position*/)
{
	register u32 gpr0 asm ("r8");
	register u32 gpr1 asm ("r13");
	switch (wi)
	{
		/* Unrolled to get rid of div which is ~38 clocks */
		/* This gets converted into a jump table by GCC with -O0 still */
		/* Generated by a BASH script.  Set gen_conditional.sh for details. */
		case 0: SET_W(w,0,xmm0,xmm15,gpr0); break;
		case 1: SET_W(w,4,xmm0,xmm15,gpr0); break;
		case 2: SET_W(w,8,xmm0,xmm15,gpr0); break;
		case 3: SET_W(w,12,xmm0,xmm15,gpr0); break;
		case 4: SET_W(w,0,xmm1,xmm15,gpr0); break;
		case 5: SET_W(w,4,xmm1,xmm15,gpr0); break;
		case 6: SET_W(w,8,xmm1,xmm15,gpr0); break;
		case 7: SET_W(w,12,xmm1,xmm15,gpr0); break;
		case 8: SET_W(w,0,xmm2,xmm15,gpr0); break;
		case 9: SET_W(w,4,xmm2,xmm15,gpr0); break;
		case 10: SET_W(w,8,xmm2,xmm15,gpr0); break;
		case 11: SET_W(w,12,xmm2,xmm15,gpr0); break;
		case 12: SET_W(w,0,xmm3,xmm15,gpr0); break;
		case 13: SET_W(w,4,xmm3,xmm15,gpr0); break;
		case 14: SET_W(w,8,xmm3,xmm15,gpr0); break;
		case 15: SET_W(w,12,xmm3,xmm15,gpr0); break;
		case 16: SET_W(w,0,xmm4,xmm15,gpr0); break;
		case 17: SET_W(w,4,xmm4,xmm15,gpr0); break;
		case 18: SET_W(w,8,xmm4,xmm15,gpr0); break;
		case 19: SET_W(w,12,xmm4,xmm15,gpr0); break;
		case 20: SET_W(w,0,xmm5,xmm15,gpr0); break;
		case 21: SET_W(w,4,xmm5,xmm15,gpr0); break;
		case 22: SET_W(w,8,xmm5,xmm15,gpr0); break;
		case 23: SET_W(w,12,xmm5,xmm15,gpr0); break;
		case 24: SET_W(w,0,xmm6,xmm15,gpr0); break;
		case 25: SET_W(w,4,xmm6,xmm15,gpr0); break;
		case 26: SET_W(w,8,xmm6,xmm15,gpr0); break;
		case 27: SET_W(w,12,xmm6,xmm15,gpr0); break;
		case 28: SET_W(w,0,xmm7,xmm15,gpr0); break;
		case 29: SET_W(w,4,xmm7,xmm15,gpr0); break;
		case 30: SET_W(w,8,xmm7,xmm15,gpr0); break;
		case 31: SET_W(w,12,xmm7,xmm15,gpr0); break;
		case 32: SET_W(w,0,xmm8,xmm15,gpr0); break;
		case 33: SET_W(w,4,xmm8,xmm15,gpr0); break;
		case 34: SET_W(w,8,xmm8,xmm15,gpr0); break;
		case 35: SET_W(w,12,xmm8,xmm15,gpr0); break;
		case 36: SET_W(w,0,xmm9,xmm15,gpr0); break;
		case 37: SET_W(w,4,xmm9,xmm15,gpr0); break;
		case 38: SET_W(w,8,xmm9,xmm15,gpr0); break;
		case 39: SET_W(w,12,xmm9,xmm15,gpr0); break;
		case 40: SET_W(w,0,xmm10,xmm15,gpr0); break;
		case 41: SET_W(w,4,xmm10,xmm15,gpr0); break;
		case 42: SET_W(w,8,xmm10,xmm15,gpr0); break;
		case 43: SET_W(w,12,xmm10,xmm15,gpr0); break;
		case 44: SET_W(w,0,xmm11,xmm15,gpr0); break;
		case 45: SET_W(w,4,xmm11,xmm15,gpr0); break;
		case 46: SET_W(w,8,xmm11,xmm15,gpr0); break;
		case 47: SET_W(w,12,xmm11,xmm15,gpr0); break;
		case 48: SET_W(w,0,xmm12,xmm15,gpr0); break;
		case 49: SET_W(w,4,xmm12,xmm15,gpr0); break;
		case 50: SET_W(w,8,xmm12,xmm15,gpr0); break;
		case 51: SET_W(w,12,xmm12,xmm15,gpr0); break;
		case 52: SET_W(w,0,xmm13,xmm15,gpr0); break;
		case 53: SET_W(w,4,xmm13,xmm15,gpr0); break;
		case 54: SET_W(w,8,xmm13,xmm15,gpr0); break;
		case 55: SET_W(w,12,xmm13,xmm15,gpr0); break;
		case 56: SET_W(w,0,xmm14,xmm15,gpr0); break;
		case 57: SET_W(w,4,xmm14,xmm15,gpr0); break;
		case 58: SET_W(w,8,xmm14,xmm15,gpr0); break;
		case 59: SET_W(w,12,xmm14,xmm15,gpr0); break;
		case 60: SET_W_ALT(w,0,mm4,gpr0,gpr1); break;
		case 61: SET_W_ALT(w,32,mm4,gpr0,gpr1); break;
		case 62: SET_W_ALT(w,0,mm5,gpr0,gpr1); break;
		case 63: SET_W_ALT(w,32,mm5,gpr0,gpr1); break;
	}
}

#endif // TSHA256_SSE2
